#include <iostream>
using namespace std;
int main()
{
#include <iostream>
#include <fstream>
#include <cctype>
#include <string>

    using namespace std;

    /* Character classes */
#define LETTER 0
#define DIGIT 1
#define UNKNOWN 99
#define EOF_CHAR -1

/* Token codes */
#define INT_LIT 10
#define IDENT 11
#define ASSIGN_OP 20
#define ADD_OP 21
#define SUB_OP 22
#define MULT_OP 23
#define DIV_OP 24
#define LEFT_PAREN 25
#define RIGHT_PAREN 26

/* Global variables */
    int charClass;
    string lexeme;
    char nextChar;
    int nextToken;
    ifstream inFile;

    /* Function declarations */
    void addChar();
    void getChar();
    void getNonBlank();
    int lookup(char ch);
    int lex();

    void addChar() {
        lexeme += nextChar;
    }

    void getChar() {
        if (inFile.get(nextChar)) {
            if (isalpha(nextChar))
                charClass = LETTER;
            else if (isdigit(nextChar))
                charClass = DIGIT;
            else
                charClass = UNKNOWN;
        }
        else {
            charClass = EOF_CHAR;
        }
    }

    void getNonBlank() {
        while (isspace(nextChar))
            getChar();
    }

    int lookup(char ch) {
        switch (ch) {
        case '(': addChar(); nextToken = LEFT_PAREN; break;
        case ')': addChar(); nextToken = RIGHT_PAREN; break;
        case '+': addChar(); nextToken = ADD_OP; break;
        case '-': addChar(); nextToken = SUB_OP; break;
        case '*': addChar(); nextToken = MULT_OP; break;
        case '/': addChar(); nextToken = DIV_OP; break;
        default: addChar(); nextToken = EOF_CHAR; break;
        }
        return nextToken;
    }

    int lex() {
        lexeme.clear();
        getNonBlank();

        switch (charClass) {
        case LETTER:
            addChar();
            getChar();
            while (charClass == LETTER || charClass == DIGIT) {
                addChar();
                getChar();
            }
            nextToken = IDENT;
            break;

        case DIGIT:
            addChar();
            getChar();
            while (charClass == DIGIT) {
                addChar();
                getChar();
            }
            nextToken = INT_LIT;
            break;

        case UNKNOWN:
            lookup(nextChar);
            getChar();
            break;

        case EOF_CHAR:
            nextToken = EOF_CHAR;
            lexeme = "EOF";
            break;
        }

        cout << "Next token is: " << nextToken << ", Next lexeme is " << lexeme << endl;
        return nextToken;
    }

    int main() {
        inFile.open("front.in");
        if (!inFile) {
            cerr << "ERROR - cannot open front.in" << endl;
            return 1;
        }

        getChar();
        do {
            lex();
        } while (nextToken != EOF_CHAR);

        inFile.close();
        return 0;
    }

    
}

